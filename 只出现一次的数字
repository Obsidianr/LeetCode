/*
  先将数组排序，然后比较和他相邻的数是否一样，如果不一样则他就是那个没有重复的数字
*/
public int singleNumber(int[] nums) {
        Arrays.sort(nums);
        int i = 0;
        for(;i<nums.length-1;i+=2){
            if(nums[i] != nums[i+1]) break;
        }
        
        return nums[i];
    }
    /*
      但是排序时间复杂度为O(nlogn),要求线性时间复杂度,降低时间复杂度,用Hash表，Hash表空间复杂度为n，要求空间复杂度O(1)
      题目中说明重复的数字都是两个，所以用异或运算，两个相同的数异或后为0，一个数和0异或还是这个数，而异或运算满足交换律，
      所以将所有的数进行异或运算，两两相同的数相互抵消为0，最后剩一个没有重复的数。
    */
    public int singleNumber(int[] nums) {
        int result = 0;
        for(int i=0;i<nums.length;i++){
            result = result^nums[i];
        }
        return result;
    }
