 
 这个题和上一题三数值和思路差不多，还是双指针法解决
 
 /**
     * 最接近的三数之和
     * @param nums
     * @param target
     * @return
     */
    public  int threeSumClosest(int[] nums, int target) {
        if(nums.length<3) return 0;
        Arrays.sort(nums);
        int result = nums[0]+nums[1]+nums[2];
        for (int i=0;i<nums.length-2;i++) {
            if(i>0&&nums[i]==nums[i-1]) continue;
            int left = i + 1, right = nums.length - 1;
            while (left < right) {
                int temp = nums[left] + nums[right] + nums[i];
                if (temp==target) return target;
                if (Math.abs(result-target)>Math.abs(temp-target)) result = temp;
                if (temp>target) {
                    while(left<right&nums[right]==nums[right-1]) {
                        right--;
                    }
                    right--;
                }
                else  {
                    while(left<right&&nums[left]==nums[left+1]) {
                        left++;
                    }
                    left++;
                }
            }
        }
        return result;
    }
    
    代码优化思路也和三数之和一样 去重 和 判断最大是否小于目标或最小值大于目标 如果是就直接返回最大值或者最小值
    参考评论区大佬代码
    
    
    双指针法的优化
元素重复的问题
举个例子，nums = [1,1,1,2,3] target = 7，那么最终的结果应该是 6 (1 + 2 + 3)。
但是按照上面的代码，在遍历的时候 nums[i]会重复的等于 1 这个数，但是其实之前 nums[i] 等于 1 已经遍历过了，后面的遍历都属于无用的遍历。
所以可以添加去重的操作
Java
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int result = nums[0] + nums[1] + nums[2];
        for(int i=0;i<nums.length-2;i++){
            int left = i+1;
            int right = nums.length - 1;
            while(left != right){
                int sum = nums[i] + nums[left] + nums[right];
                if(Math.abs(sum - target) < Math.abs(result - target))
                    result = sum;
                if(sum > target){
                    right--;
                    // 解决nums[right]重复
                    while(left != right && nums[right] == nums[right+1])
                        right--;
                }
                else{
                    left++;
                    // 解决nums[left]重复
                    while(left != right && nums[left] == nums[left-1])
                        left++;
                }
            }
            // 解决nums[i]重复
            while(i<nums.length-2 && nums[i] == nums[i+1])
                i++;
        }
        return result;
    }
}
超越界限的问题
举个例子，nums = [-3,-1,3,4,5]。
假设 i = 0，left = 1，right = 4，那么每次 left 和 right 之间都有许多元素，那么 left 和 right 之间的元素之和肯定也有一个最小值和一个最大值。
就如同 left = 1，right = 4，那么移动指针的情况下，nums[left] + nums[right] 的最小值肯定为 nums[left] + nums[left + 1]，因为这两个元素是 left 和 right 范围内能取到的最小的两个元素，同理可证最大值。
如果 target 的值比 nums[i] + nums[left] + nums[left + 1] 的值还小，那么双指针无论怎么取，最后都会取到 nums[i] + nums[left] + nums[left + 1]。
同理可证 target 的值比nums[i] + nums[right] + nums[right - 1] 的值还大的情况。
所以可以增加一个判断，满足条件的情况下就可以直接取值，而不需要双指针一步步的判断来进行取值，减少了双指针的移动。
Java
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int result = nums[0] + nums[1] + nums[2];
        for(int i=0;i<nums.length-2;i++){
            int left = i+1;
            int right = nums.length - 1;
            while(left != right){
                // 判断最小值
                int min = nums[i] + nums[left] + nums[left + 1];
                if(target < min){
                    if(Math.abs(result - target) > Math.abs(min - target))
                        result = min;
                    break;
                }
                //判断最大值
                int max = nums[i] + nums[right] + nums[right - 1];
                if(target > max){
                    if(Math.abs(result - target) > Math.abs(max - target))
                        result = max;
                    break;  
                }
                int sum = nums[i] + nums[left] + nums[right];
                if(Math.abs(sum - target) < Math.abs(result - target))
                    result = sum;
                if(sum > target){
                    right--;
                    while(left != right && nums[right] == nums[right+1])
                        right--;
                }
                else{
                    left++;
                    while(left != right && nums[left] == nums[left-1])
                        left++;
                }
            }
            while(i<nums.length-2 && nums[i] == nums[i+1])
                i++;
        }
        return result;
    }
}
三数之和等于 target 的问题
举个例子，nums = [1,1,2,3,4,5,6,10] target = 12，那么最终的结果应该是 12 (1 + 1 + 10)。
有些时候，可能会直接找到三数之和等于 target 的情况，此时直接返回结果即可，不需要在进行之后的循环，因为不可能有数比他自己更接近自己了。
Java
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int result = nums[0] + nums[1] + nums[2];
        for(int i=0;i<nums.length-2;i++){
            int left = i+1;
            int right = nums.length - 1;
            while(left != right){
                int min = nums[i] + nums[left] + nums[left + 1];
                if(target < min){
                    if(Math.abs(result - target) > Math.abs(min - target))
                        result = min;
                    break;
                }
                int max = nums[i] + nums[right] + nums[right - 1];
                if(target > max){
                    if(Math.abs(result - target) > Math.abs(max - target))
                        result = max;
                    break;  
                }
                int sum = nums[i] + nums[left] + nums[right];
                // 判断三数之和是否等于target
                if(sum == target)
                    return sum;
                if(Math.abs(sum - target) < Math.abs(result - target))
                    result = sum;
                if(sum > target){
                    right--;
                    while(left != right && nums[right] == nums[right+1])
                        right--;
                }

作者：karua
链接：https://leetcode-cn.com/problems/3sum-closest/solution/dui-shuang-zhi-zhen-fa-jin-xing-yi-dian-you-hua-da/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
