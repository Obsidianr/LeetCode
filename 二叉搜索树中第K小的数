给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。

说明：
你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。

示例 1:

输入: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
输出: 1
示例 2:

输入: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
输出: 3
/*
  二叉搜索树第K小就是中序遍历的第k个数
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 //递归中序遍历
class Solution {
 int  ans = 0;
 int count ;
    public int kthSmallest(TreeNode root, int k) {
       count = k;
        midOrder(root);
        return ans;

    }
    public void midOrder(TreeNode root){
        if(root == null) return;
        midOrder(root.left);
        if(--count == 0){
            ans = root.val;
            return;
        }
        midOrder(root.right);
    }
}

//非递归中粗遍历
    public int kthSmallest(TreeNode root, int k) {
        Stack<TreeNode> s = new Stack<TreeNode>();
       while(k > 0){
           if(root != null){
               s.push(root);
               root = root.left;
            }
            else{
                root = s.pop();
                k--;
                if(k == 0) return root.val;
                root = root.right;
            }
       }
       return 0;
    }
