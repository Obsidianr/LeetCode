/*
同时遍历两个链表，同位相加到 l1 ，如果 l1 为空了，直接将 l2 的剩余部分连过来，
然后将结果链表遍历处理进位。
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
    public  ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null) return l2;
        if(l2 == null) return l1;
        ListNode head = l1;
        ListNode pro = l1;
        while(l1 != null && l2 != null ){  //同位相加
            l1.val = l1.val + l2.val;
            pro = l1;
            l1 = l1.next;
            l2 = l2.next;
        }
        if (l1 == null){     //将l2剩余部分连起来
            pro.next = l2;
        }
        l1 = head;
        while(l1.next != null){  //进位
            if (l1.val >= 10){
                l1.next.val += (l1.val / 10);
                l1.val = l1.val % 10;
            }
            l1 = l1.next;
        }
        if(l1.val >= 10){
            l1.next = new ListNode(l1.val / 10);
            l1.val = l1.val % 10;
        }
        return head;
    }
