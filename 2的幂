给定一个整数，编写一个函数来判断它是否是 2 的幂次方。

示例 1:
输入: 1
输出: true
解释: 20 = 1

示例 2:
输入: 16
输出: true
解释: 24 = 16

示例 3:
输入: 218
输出: false

/*
    所有2的幂都是  ...1000...,所以对于要检验的数先左移一位再右移一位值不变，若值变了则返回false，若不变继续左移，直到等于1或者等于0，
    等于一则是2的幂，等于0则不是。
*/

public boolean isPowerOfTwo(int n) {
       if(n<1) return false;
       int temp = n;
       while(n>0){
           if(n == 1 )return true;
           else {
               temp = n;
                n = n>>1;           
           }
           if(temp != n<<1 ) return false;
       } 
       return false;
    }
    
    
    /**************************************************************************/
 若 n = 2^x,且 x 为自然数（即 n 为 2 的幂），则一定满足以下条件：
恒有 n & (n - 1) == 0，这是因为：
n 二进制最高位为 1，其余所有位为 0；
n - 1 二进制最高位为 0，其余所有位为 1；
一定满足 n > 0。
因此，通过 n > 0 且 n & (n - 1) == 0 即可判定是否满足 n = 2^x 
2^0 
 	00010001	00000000	(0001) & (0000) == 0
2^1
 	00100010	00010001	(0010) & (0001) == 0
2^2
 	01000100	00110011	(0100) & (0011) == 0
2^3
 	10001000	01110111	(1000) & (0111) == 0
 
 
   public boolean isPowerOfTwo(int n) {
        return n > 0 && (n & (n - 1)) == 0;
    }


作者：jyd
链接：https://leetcode-cn.com/problems/power-of-two/solution/power-of-two-er-jin-zhi-ji-jian-by-jyd/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
