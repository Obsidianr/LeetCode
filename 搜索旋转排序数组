/*
  旋转一次后数组在最小值两边都是有序的，所以将数组从中间分开，
  必然有一半是有序的，
  然后检查如果有一个数组最左边的小于最右边的则为有序数组，
      检查target是否在有序数组中，如果存在则二分查找，
如果不在则继续分割无序数组。  
*/
public int search(int[] nums, int target) {
                if(nums.length == 0) return -1;
        int high = nums.length-1;
        int low = 0;
        while(low <= high){
            int mid = (low + high)/2;
            if(nums[mid] == target) return mid;
            if(nums[mid] < nums[high]){
                if(target > nums[mid] && target <= nums[high]){
                    low = mid+1;
                }
                else{
                    high = mid-1;
                }
            }else{
                 if(target < nums[mid] && target >= nums[low]){
                    high = mid-1;
                }
                else{
                    low = mid+1;
                }
            }
        }     
       return -1;
    }
