题目描述：
给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ ：的元素。
你可以假设数组是非空的，并且给定的数组总是存在多数元素。
示例 1:
输入: [3,2,3]
输出: 3

示例 2:
输入: [2,2,1,1,1,2,2]
输出: 2

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/majority-element
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 
 /*
    用Hash表
        键记录数组中的数字，值记录出现的次数。
        时间复杂度O(n)，空间复杂度O(n)
 */
 public int majorityElement(int[] nums) {
        int mid = nums.length/2;
        Map<Integer,Integer> map = new HashMap<>();
        for(int i = 0;i<nums.length;i++){    //记录键值
            if(map.containsKey(nums[i])) {   //已有键，值++
                int a = map.get(nums[i]);
                map.put(nums[i],++a);
            }
            else{
                map.put(nums[i],1);   //创建新键
            }
        }
       for(Map.Entry<Integer,Integer> a:map.entrySet()){   //找出多数元素
           if(a.getValue()>mid) return a.getKey();
       }
       return 0;
    }
    
    /*******************************************************************************/
    /*
     摩尔投票法
         将第一个数默认为是众数，然后向后遍历，如果与当前众数相同则计数加一，如果不同就减一，
         若计数减到一就舍弃已经遍历过的元素，从下一个数开始继续投票。
         （舍弃掉的元素中众数和非众数数量一样多，剩余的元素中，还是众数多，所以继续投票并不影响结果）
         时间复杂度O(n)
         空间复杂度O(1)
    */
    
    public int majorityElement(int[] nums) {
        int count = 0;
        int result = 0;
        for(int i=0;i<nums.length;i++){
            if(count == 0) {
                result = nums[i];
                count++;
            }
            else{
                if(result == nums[i]) count++;
                else count--;
            }
        }
        return result;
    }
